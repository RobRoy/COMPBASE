package de.unipotsdam.elis.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import de.unipotsdam.elis.model.Evidence;
import de.unipotsdam.elis.service.EvidenceLocalService;
import de.unipotsdam.elis.service.persistence.EvidencePersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the evidence local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link de.unipotsdam.elis.service.impl.EvidenceLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see de.unipotsdam.elis.service.impl.EvidenceLocalServiceImpl
 * @see de.unipotsdam.elis.service.EvidenceLocalServiceUtil
 * @generated
 */
public abstract class EvidenceLocalServiceBaseImpl extends BaseLocalServiceImpl
    implements EvidenceLocalService, IdentifiableBean {
    @BeanReference(type = de.unipotsdam.elis.service.EvidenceLocalService.class)
    protected de.unipotsdam.elis.service.EvidenceLocalService evidenceLocalService;
    @BeanReference(type = de.unipotsdam.elis.service.EvidenceService.class)
    protected de.unipotsdam.elis.service.EvidenceService evidenceService;
    @BeanReference(type = EvidencePersistence.class)
    protected EvidencePersistence evidencePersistence;
    @BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
    protected com.liferay.counter.service.CounterLocalService counterLocalService;
    @BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
    protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
    @BeanReference(type = com.liferay.portal.service.UserLocalService.class)
    protected com.liferay.portal.service.UserLocalService userLocalService;
    @BeanReference(type = com.liferay.portal.service.UserService.class)
    protected com.liferay.portal.service.UserService userService;
    @BeanReference(type = UserPersistence.class)
    protected UserPersistence userPersistence;
    private String _beanIdentifier;
    private ClassLoader _classLoader;
    private EvidenceLocalServiceClpInvoker _clpInvoker = new EvidenceLocalServiceClpInvoker();

    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. Always use {@link de.unipotsdam.elis.service.EvidenceLocalServiceUtil} to access the evidence local service.
     */

    /**
     * Adds the evidence to the database. Also notifies the appropriate model listeners.
     *
     * @param evidence the evidence
     * @return the evidence that was added
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public Evidence addEvidence(Evidence evidence) throws SystemException {
        evidence.setNew(true);

        return evidencePersistence.update(evidence);
    }

    /**
     * Creates a new evidence with the primary key. Does not add the evidence to the database.
     *
     * @param evidenceId the primary key for the new evidence
     * @return the new evidence
     */
    @Override
    public Evidence createEvidence(long evidenceId) {
        return evidencePersistence.create(evidenceId);
    }

    /**
     * Deletes the evidence with the primary key from the database. Also notifies the appropriate model listeners.
     *
     * @param evidenceId the primary key of the evidence
     * @return the evidence that was removed
     * @throws PortalException if a evidence with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public Evidence deleteEvidence(long evidenceId)
        throws PortalException, SystemException {
        return evidencePersistence.remove(evidenceId);
    }

    /**
     * Deletes the evidence from the database. Also notifies the appropriate model listeners.
     *
     * @param evidence the evidence
     * @return the evidence that was removed
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public Evidence deleteEvidence(Evidence evidence) throws SystemException {
        return evidencePersistence.remove(evidence);
    }

    @Override
    public DynamicQuery dynamicQuery() {
        Class<?> clazz = getClass();

        return DynamicQueryFactoryUtil.forClass(Evidence.class,
            clazz.getClassLoader());
    }

    /**
     * Performs a dynamic query on the database and returns the matching rows.
     *
     * @param dynamicQuery the dynamic query
     * @return the matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery)
        throws SystemException {
        return evidencePersistence.findWithDynamicQuery(dynamicQuery);
    }

    /**
     * Performs a dynamic query on the database and returns a range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link de.unipotsdam.elis.model.impl.EvidenceModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @return the range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
        throws SystemException {
        return evidencePersistence.findWithDynamicQuery(dynamicQuery, start, end);
    }

    /**
     * Performs a dynamic query on the database and returns an ordered range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link de.unipotsdam.elis.model.impl.EvidenceModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
     * @return the ordered range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
        OrderByComparator orderByComparator) throws SystemException {
        return evidencePersistence.findWithDynamicQuery(dynamicQuery, start,
            end, orderByComparator);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery)
        throws SystemException {
        return evidencePersistence.countWithDynamicQuery(dynamicQuery);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @param projection the projection to apply to the query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery,
        Projection projection) throws SystemException {
        return evidencePersistence.countWithDynamicQuery(dynamicQuery,
            projection);
    }

    @Override
    public Evidence fetchEvidence(long evidenceId) throws SystemException {
        return evidencePersistence.fetchByPrimaryKey(evidenceId);
    }

    /**
     * Returns the evidence with the primary key.
     *
     * @param evidenceId the primary key of the evidence
     * @return the evidence
     * @throws PortalException if a evidence with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public Evidence getEvidence(long evidenceId)
        throws PortalException, SystemException {
        return evidencePersistence.findByPrimaryKey(evidenceId);
    }

    @Override
    public PersistedModel getPersistedModel(Serializable primaryKeyObj)
        throws PortalException, SystemException {
        return evidencePersistence.findByPrimaryKey(primaryKeyObj);
    }

    /**
     * Returns a range of all the evidences.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link de.unipotsdam.elis.model.impl.EvidenceModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param start the lower bound of the range of evidences
     * @param end the upper bound of the range of evidences (not inclusive)
     * @return the range of evidences
     * @throws SystemException if a system exception occurred
     */
    @Override
    public List<Evidence> getEvidences(int start, int end)
        throws SystemException {
        return evidencePersistence.findAll(start, end);
    }

    /**
     * Returns the number of evidences.
     *
     * @return the number of evidences
     * @throws SystemException if a system exception occurred
     */
    @Override
    public int getEvidencesCount() throws SystemException {
        return evidencePersistence.countAll();
    }

    /**
     * Updates the evidence in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
     *
     * @param evidence the evidence
     * @return the evidence that was updated
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public Evidence updateEvidence(Evidence evidence) throws SystemException {
        return evidencePersistence.update(evidence);
    }

    /**
     * Returns the evidence local service.
     *
     * @return the evidence local service
     */
    public de.unipotsdam.elis.service.EvidenceLocalService getEvidenceLocalService() {
        return evidenceLocalService;
    }

    /**
     * Sets the evidence local service.
     *
     * @param evidenceLocalService the evidence local service
     */
    public void setEvidenceLocalService(
        de.unipotsdam.elis.service.EvidenceLocalService evidenceLocalService) {
        this.evidenceLocalService = evidenceLocalService;
    }

    /**
     * Returns the evidence remote service.
     *
     * @return the evidence remote service
     */
    public de.unipotsdam.elis.service.EvidenceService getEvidenceService() {
        return evidenceService;
    }

    /**
     * Sets the evidence remote service.
     *
     * @param evidenceService the evidence remote service
     */
    public void setEvidenceService(
        de.unipotsdam.elis.service.EvidenceService evidenceService) {
        this.evidenceService = evidenceService;
    }

    /**
     * Returns the evidence persistence.
     *
     * @return the evidence persistence
     */
    public EvidencePersistence getEvidencePersistence() {
        return evidencePersistence;
    }

    /**
     * Sets the evidence persistence.
     *
     * @param evidencePersistence the evidence persistence
     */
    public void setEvidencePersistence(EvidencePersistence evidencePersistence) {
        this.evidencePersistence = evidencePersistence;
    }

    /**
     * Returns the counter local service.
     *
     * @return the counter local service
     */
    public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
        return counterLocalService;
    }

    /**
     * Sets the counter local service.
     *
     * @param counterLocalService the counter local service
     */
    public void setCounterLocalService(
        com.liferay.counter.service.CounterLocalService counterLocalService) {
        this.counterLocalService = counterLocalService;
    }

    /**
     * Returns the resource local service.
     *
     * @return the resource local service
     */
    public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
        return resourceLocalService;
    }

    /**
     * Sets the resource local service.
     *
     * @param resourceLocalService the resource local service
     */
    public void setResourceLocalService(
        com.liferay.portal.service.ResourceLocalService resourceLocalService) {
        this.resourceLocalService = resourceLocalService;
    }

    /**
     * Returns the user local service.
     *
     * @return the user local service
     */
    public com.liferay.portal.service.UserLocalService getUserLocalService() {
        return userLocalService;
    }

    /**
     * Sets the user local service.
     *
     * @param userLocalService the user local service
     */
    public void setUserLocalService(
        com.liferay.portal.service.UserLocalService userLocalService) {
        this.userLocalService = userLocalService;
    }

    /**
     * Returns the user remote service.
     *
     * @return the user remote service
     */
    public com.liferay.portal.service.UserService getUserService() {
        return userService;
    }

    /**
     * Sets the user remote service.
     *
     * @param userService the user remote service
     */
    public void setUserService(
        com.liferay.portal.service.UserService userService) {
        this.userService = userService;
    }

    /**
     * Returns the user persistence.
     *
     * @return the user persistence
     */
    public UserPersistence getUserPersistence() {
        return userPersistence;
    }

    /**
     * Sets the user persistence.
     *
     * @param userPersistence the user persistence
     */
    public void setUserPersistence(UserPersistence userPersistence) {
        this.userPersistence = userPersistence;
    }

    public void afterPropertiesSet() {
        Class<?> clazz = getClass();

        _classLoader = clazz.getClassLoader();

        PersistedModelLocalServiceRegistryUtil.register("de.unipotsdam.elis.model.Evidence",
            evidenceLocalService);
    }

    public void destroy() {
        PersistedModelLocalServiceRegistryUtil.unregister(
            "de.unipotsdam.elis.model.Evidence");
    }

    /**
     * Returns the Spring bean ID for this bean.
     *
     * @return the Spring bean ID for this bean
     */
    @Override
    public String getBeanIdentifier() {
        return _beanIdentifier;
    }

    /**
     * Sets the Spring bean ID for this bean.
     *
     * @param beanIdentifier the Spring bean ID for this bean
     */
    @Override
    public void setBeanIdentifier(String beanIdentifier) {
        _beanIdentifier = beanIdentifier;
    }

    @Override
    public Object invokeMethod(String name, String[] parameterTypes,
        Object[] arguments) throws Throwable {
        Thread currentThread = Thread.currentThread();

        ClassLoader contextClassLoader = currentThread.getContextClassLoader();

        if (contextClassLoader != _classLoader) {
            currentThread.setContextClassLoader(_classLoader);
        }

        try {
            return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
        } finally {
            if (contextClassLoader != _classLoader) {
                currentThread.setContextClassLoader(contextClassLoader);
            }
        }
    }

    protected Class<?> getModelClass() {
        return Evidence.class;
    }

    protected String getModelClassName() {
        return Evidence.class.getName();
    }

    /**
     * Performs an SQL query.
     *
     * @param sql the sql query
     */
    protected void runSQL(String sql) throws SystemException {
        try {
            DataSource dataSource = evidencePersistence.getDataSource();

            SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
                    sql, new int[0]);

            sqlUpdate.update();
        } catch (Exception e) {
            throw new SystemException(e);
        }
    }
}
