package uzuzjmd.competence.assessment.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import uzuzjmd.competence.assessment.model.ReflexionsAssessment;
import uzuzjmd.competence.assessment.model.ReflexionsAssessmentModel;
import uzuzjmd.competence.assessment.model.ReflexionsAssessmentSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ReflexionsAssessment service. Represents a row in the &quot;competenceAssessment_ReflexionsAssessment&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link uzuzjmd.competence.assessment.model.ReflexionsAssessmentModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ReflexionsAssessmentImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ReflexionsAssessmentImpl
 * @see uzuzjmd.competence.assessment.model.ReflexionsAssessment
 * @see uzuzjmd.competence.assessment.model.ReflexionsAssessmentModel
 * @generated
 */
@JSON(strict = true)
public class ReflexionsAssessmentModelImpl extends BaseModelImpl<ReflexionsAssessment>
    implements ReflexionsAssessmentModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a reflexions assessment model instance should use the {@link uzuzjmd.competence.assessment.model.ReflexionsAssessment} interface instead.
     */
    public static final String TABLE_NAME = "competenceAssessment_ReflexionsAssessment";
    public static final Object[][] TABLE_COLUMNS = {
            { "uuid_", Types.VARCHAR },
            { "assessmentId", Types.BIGINT },
            { "groupId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "userName", Types.VARCHAR },
            { "createDate", Types.TIMESTAMP },
            { "modifiedDate", Types.TIMESTAMP },
            { "competenceDescription", Types.VARCHAR },
            { "competenceId", Types.VARCHAR },
            { "assessmentIndex", Types.INTEGER },
            { "isLearningGoal", Types.BOOLEAN }
        };
    public static final String TABLE_SQL_CREATE = "create table competenceAssessment_ReflexionsAssessment (uuid_ VARCHAR(75) null,assessmentId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,competenceDescription VARCHAR(75) null,competenceId VARCHAR(75) null,assessmentIndex INTEGER,isLearningGoal BOOLEAN)";
    public static final String TABLE_SQL_DROP = "drop table competenceAssessment_ReflexionsAssessment";
    public static final String ORDER_BY_JPQL = " ORDER BY reflexionsAssessment.competenceId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY competenceAssessment_ReflexionsAssessment.competenceId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.uzuzjmd.competence.assessment.model.ReflexionsAssessment"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.uzuzjmd.competence.assessment.model.ReflexionsAssessment"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.uzuzjmd.competence.assessment.model.ReflexionsAssessment"),
            true);
    public static long COMPANYID_COLUMN_BITMASK = 1L;
    public static long GROUPID_COLUMN_BITMASK = 2L;
    public static long UUID_COLUMN_BITMASK = 4L;
    public static long COMPETENCEID_COLUMN_BITMASK = 8L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.uzuzjmd.competence.assessment.model.ReflexionsAssessment"));
    private static ClassLoader _classLoader = ReflexionsAssessment.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            ReflexionsAssessment.class
        };
    private String _uuid;
    private String _originalUuid;
    private long _assessmentId;
    private long _groupId;
    private long _originalGroupId;
    private boolean _setOriginalGroupId;
    private long _companyId;
    private long _originalCompanyId;
    private boolean _setOriginalCompanyId;
    private long _userId;
    private String _userUuid;
    private String _userName;
    private Date _createDate;
    private Date _modifiedDate;
    private String _competenceDescription;
    private String _competenceId;
    private int _assessmentIndex;
    private boolean _isLearningGoal;
    private long _columnBitmask;
    private ReflexionsAssessment _escapedModel;

    public ReflexionsAssessmentModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static ReflexionsAssessment toModel(
        ReflexionsAssessmentSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        ReflexionsAssessment model = new ReflexionsAssessmentImpl();

        model.setUuid(soapModel.getUuid());
        model.setAssessmentId(soapModel.getAssessmentId());
        model.setGroupId(soapModel.getGroupId());
        model.setCompanyId(soapModel.getCompanyId());
        model.setUserId(soapModel.getUserId());
        model.setUserName(soapModel.getUserName());
        model.setCreateDate(soapModel.getCreateDate());
        model.setModifiedDate(soapModel.getModifiedDate());
        model.setCompetenceDescription(soapModel.getCompetenceDescription());
        model.setCompetenceId(soapModel.getCompetenceId());
        model.setAssessmentIndex(soapModel.getAssessmentIndex());
        model.setIsLearningGoal(soapModel.getIsLearningGoal());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<ReflexionsAssessment> toModels(
        ReflexionsAssessmentSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<ReflexionsAssessment> models = new ArrayList<ReflexionsAssessment>(soapModels.length);

        for (ReflexionsAssessmentSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _assessmentId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setAssessmentId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _assessmentId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return ReflexionsAssessment.class;
    }

    @Override
    public String getModelClassName() {
        return ReflexionsAssessment.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("uuid", getUuid());
        attributes.put("assessmentId", getAssessmentId());
        attributes.put("groupId", getGroupId());
        attributes.put("companyId", getCompanyId());
        attributes.put("userId", getUserId());
        attributes.put("userName", getUserName());
        attributes.put("createDate", getCreateDate());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("competenceDescription", getCompetenceDescription());
        attributes.put("competenceId", getCompetenceId());
        attributes.put("assessmentIndex", getAssessmentIndex());
        attributes.put("isLearningGoal", getIsLearningGoal());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String uuid = (String) attributes.get("uuid");

        if (uuid != null) {
            setUuid(uuid);
        }

        Long assessmentId = (Long) attributes.get("assessmentId");

        if (assessmentId != null) {
            setAssessmentId(assessmentId);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        String userName = (String) attributes.get("userName");

        if (userName != null) {
            setUserName(userName);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        String competenceDescription = (String) attributes.get(
                "competenceDescription");

        if (competenceDescription != null) {
            setCompetenceDescription(competenceDescription);
        }

        String competenceId = (String) attributes.get("competenceId");

        if (competenceId != null) {
            setCompetenceId(competenceId);
        }

        Integer assessmentIndex = (Integer) attributes.get("assessmentIndex");

        if (assessmentIndex != null) {
            setAssessmentIndex(assessmentIndex);
        }

        Boolean isLearningGoal = (Boolean) attributes.get("isLearningGoal");

        if (isLearningGoal != null) {
            setIsLearningGoal(isLearningGoal);
        }
    }

    @JSON
    @Override
    public String getUuid() {
        if (_uuid == null) {
            return StringPool.BLANK;
        } else {
            return _uuid;
        }
    }

    @Override
    public void setUuid(String uuid) {
        if (_originalUuid == null) {
            _originalUuid = _uuid;
        }

        _uuid = uuid;
    }

    public String getOriginalUuid() {
        return GetterUtil.getString(_originalUuid);
    }

    @JSON
    @Override
    public long getAssessmentId() {
        return _assessmentId;
    }

    @Override
    public void setAssessmentId(long assessmentId) {
        _assessmentId = assessmentId;
    }

    @JSON
    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _columnBitmask |= GROUPID_COLUMN_BITMASK;

        if (!_setOriginalGroupId) {
            _setOriginalGroupId = true;

            _originalGroupId = _groupId;
        }

        _groupId = groupId;
    }

    public long getOriginalGroupId() {
        return _originalGroupId;
    }

    @JSON
    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _columnBitmask |= COMPANYID_COLUMN_BITMASK;

        if (!_setOriginalCompanyId) {
            _setOriginalCompanyId = true;

            _originalCompanyId = _companyId;
        }

        _companyId = companyId;
    }

    public long getOriginalCompanyId() {
        return _originalCompanyId;
    }

    @JSON
    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    @JSON
    @Override
    public String getUserName() {
        if (_userName == null) {
            return StringPool.BLANK;
        } else {
            return _userName;
        }
    }

    @Override
    public void setUserName(String userName) {
        _userName = userName;
    }

    @JSON
    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @JSON
    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @JSON
    @Override
    public String getCompetenceDescription() {
        if (_competenceDescription == null) {
            return StringPool.BLANK;
        } else {
            return _competenceDescription;
        }
    }

    @Override
    public void setCompetenceDescription(String competenceDescription) {
        _competenceDescription = competenceDescription;
    }

    @JSON
    @Override
    public String getCompetenceId() {
        if (_competenceId == null) {
            return StringPool.BLANK;
        } else {
            return _competenceId;
        }
    }

    @Override
    public void setCompetenceId(String competenceId) {
        _columnBitmask = -1L;

        _competenceId = competenceId;
    }

    @JSON
    @Override
    public int getAssessmentIndex() {
        return _assessmentIndex;
    }

    @Override
    public void setAssessmentIndex(int assessmentIndex) {
        _assessmentIndex = assessmentIndex;
    }

    @JSON
    @Override
    public boolean getIsLearningGoal() {
        return _isLearningGoal;
    }

    @Override
    public boolean isIsLearningGoal() {
        return _isLearningGoal;
    }

    @Override
    public void setIsLearningGoal(boolean isLearningGoal) {
        _isLearningGoal = isLearningGoal;
    }

    @Override
    public StagedModelType getStagedModelType() {
        return new StagedModelType(PortalUtil.getClassNameId(
                ReflexionsAssessment.class.getName()));
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            ReflexionsAssessment.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public ReflexionsAssessment toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (ReflexionsAssessment) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        ReflexionsAssessmentImpl reflexionsAssessmentImpl = new ReflexionsAssessmentImpl();

        reflexionsAssessmentImpl.setUuid(getUuid());
        reflexionsAssessmentImpl.setAssessmentId(getAssessmentId());
        reflexionsAssessmentImpl.setGroupId(getGroupId());
        reflexionsAssessmentImpl.setCompanyId(getCompanyId());
        reflexionsAssessmentImpl.setUserId(getUserId());
        reflexionsAssessmentImpl.setUserName(getUserName());
        reflexionsAssessmentImpl.setCreateDate(getCreateDate());
        reflexionsAssessmentImpl.setModifiedDate(getModifiedDate());
        reflexionsAssessmentImpl.setCompetenceDescription(getCompetenceDescription());
        reflexionsAssessmentImpl.setCompetenceId(getCompetenceId());
        reflexionsAssessmentImpl.setAssessmentIndex(getAssessmentIndex());
        reflexionsAssessmentImpl.setIsLearningGoal(getIsLearningGoal());

        reflexionsAssessmentImpl.resetOriginalValues();

        return reflexionsAssessmentImpl;
    }

    @Override
    public int compareTo(ReflexionsAssessment reflexionsAssessment) {
        int value = 0;

        value = getCompetenceId()
                    .compareTo(reflexionsAssessment.getCompetenceId());

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof ReflexionsAssessment)) {
            return false;
        }

        ReflexionsAssessment reflexionsAssessment = (ReflexionsAssessment) obj;

        long primaryKey = reflexionsAssessment.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        ReflexionsAssessmentModelImpl reflexionsAssessmentModelImpl = this;

        reflexionsAssessmentModelImpl._originalUuid = reflexionsAssessmentModelImpl._uuid;

        reflexionsAssessmentModelImpl._originalGroupId = reflexionsAssessmentModelImpl._groupId;

        reflexionsAssessmentModelImpl._setOriginalGroupId = false;

        reflexionsAssessmentModelImpl._originalCompanyId = reflexionsAssessmentModelImpl._companyId;

        reflexionsAssessmentModelImpl._setOriginalCompanyId = false;

        reflexionsAssessmentModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<ReflexionsAssessment> toCacheModel() {
        ReflexionsAssessmentCacheModel reflexionsAssessmentCacheModel = new ReflexionsAssessmentCacheModel();

        reflexionsAssessmentCacheModel.uuid = getUuid();

        String uuid = reflexionsAssessmentCacheModel.uuid;

        if ((uuid != null) && (uuid.length() == 0)) {
            reflexionsAssessmentCacheModel.uuid = null;
        }

        reflexionsAssessmentCacheModel.assessmentId = getAssessmentId();

        reflexionsAssessmentCacheModel.groupId = getGroupId();

        reflexionsAssessmentCacheModel.companyId = getCompanyId();

        reflexionsAssessmentCacheModel.userId = getUserId();

        reflexionsAssessmentCacheModel.userName = getUserName();

        String userName = reflexionsAssessmentCacheModel.userName;

        if ((userName != null) && (userName.length() == 0)) {
            reflexionsAssessmentCacheModel.userName = null;
        }

        Date createDate = getCreateDate();

        if (createDate != null) {
            reflexionsAssessmentCacheModel.createDate = createDate.getTime();
        } else {
            reflexionsAssessmentCacheModel.createDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            reflexionsAssessmentCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            reflexionsAssessmentCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        reflexionsAssessmentCacheModel.competenceDescription = getCompetenceDescription();

        String competenceDescription = reflexionsAssessmentCacheModel.competenceDescription;

        if ((competenceDescription != null) &&
                (competenceDescription.length() == 0)) {
            reflexionsAssessmentCacheModel.competenceDescription = null;
        }

        reflexionsAssessmentCacheModel.competenceId = getCompetenceId();

        String competenceId = reflexionsAssessmentCacheModel.competenceId;

        if ((competenceId != null) && (competenceId.length() == 0)) {
            reflexionsAssessmentCacheModel.competenceId = null;
        }

        reflexionsAssessmentCacheModel.assessmentIndex = getAssessmentIndex();

        reflexionsAssessmentCacheModel.isLearningGoal = getIsLearningGoal();

        return reflexionsAssessmentCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(25);

        sb.append("{uuid=");
        sb.append(getUuid());
        sb.append(", assessmentId=");
        sb.append(getAssessmentId());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", userName=");
        sb.append(getUserName());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", competenceDescription=");
        sb.append(getCompetenceDescription());
        sb.append(", competenceId=");
        sb.append(getCompetenceId());
        sb.append(", assessmentIndex=");
        sb.append(getAssessmentIndex());
        sb.append(", isLearningGoal=");
        sb.append(getIsLearningGoal());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(40);

        sb.append("<model><model-name>");
        sb.append("uzuzjmd.competence.assessment.model.ReflexionsAssessment");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>uuid</column-name><column-value><![CDATA[");
        sb.append(getUuid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>assessmentId</column-name><column-value><![CDATA[");
        sb.append(getAssessmentId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userName</column-name><column-value><![CDATA[");
        sb.append(getUserName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>competenceDescription</column-name><column-value><![CDATA[");
        sb.append(getCompetenceDescription());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>competenceId</column-name><column-value><![CDATA[");
        sb.append(getCompetenceId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>assessmentIndex</column-name><column-value><![CDATA[");
        sb.append(getAssessmentIndex());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>isLearningGoal</column-name><column-value><![CDATA[");
        sb.append(getIsLearningGoal());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
